{"version":3,"sources":["components/Quakes.js","images/earthquake.png","components/Map.js","components/Navbar.js","App.js","utils.js","index.js"],"names":["Quakes","props","hoursAgo","Date","now","data","properties","time","toFixed","className","quakePlace","startIndex","indexOf","location","slice","toUpperCase","concat","parseLocation","place","mag","MapContainer","markerClickHandler","marker","e","setState","selectedPlace","activeMarker","showingInfoWindow","mapClickHandler","state","google","window","quakeMarkers","this","map","quake","markerSize","maps","Size","onClick","title","name","position","lat","geometry","coordinates","lng","icon","url","scaledSize","origin","Point","anchor","uuidv4","style","width","height","zoom","initialCenter","visible","React","Component","GoogleApiWrapper","apiKey","Navbar","src","alt","action","method","htmlFor","id","onChange","magnitudeHandler","value","timeframeHandler","type","submitHandler","App","magnitude","target","timeframe","preventDefault","startTime","currentTime","getTimeString","toISOString","split","join","endTime","minmag","parseFloat","getTime","getQueryString","api_url","axios","get","then","response","quakesData","features","catch","error","isLoaded","console","log","quakes","startDate","toLocaleDateString","endDate","message","Map","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c234e601.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Quakes(props) {\n  // current time minus time of quake divided by minutes, seconds, and milliseconds to return hours passed\n  const hoursAgo = (\n    (Date.now() - new Date(props.data.properties.time)) /\n    (60 * 60 * 1000)\n  ).toFixed();\n  // Extract only the location name without the magnitude\n  const parseLocation = (quakePlace) => {\n    let startIndex = quakePlace.indexOf(\"of\");\n    startIndex === -1 ? startIndex++ : (startIndex += 3);\n    const location = quakePlace.slice(startIndex);\n    return location.slice(0, 1).toUpperCase().concat(location.slice(1));\n  };\n  return (\n    <div className=\"earthquake-details\">\n      <p>{parseLocation(props.data.properties.place)}</p>\n      <p>\n        M {props.data.properties.mag} - {hoursAgo} hours ago\n      </p>\n    </div>\n  );\n}\n\nexport default Quakes;\n","export default __webpack_public_path__ + \"static/media/earthquake.97de581e.png\";","import React from \"react\";\nimport { GoogleApiWrapper, Map, InfoWindow, Marker } from \"google-maps-react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport icon from \"../images/earthquake.png\";\n\n\nconst API_KEY = `AIzaSyDq9Qg59ppIwA5vsoGWMRnNfzw75xn7N_I`;\n\nclass MapContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showingInfoWindow: false,\n      activeMarker: {},\n      selectedPlace: {},\n    };\n  }\n  markerClickHandler = (props, marker, e) => {\n    this.setState({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true,\n    });\n  };\n  mapClickHandler = (props) => {\n    if (this.state.showingInfoWindow) {\n      this.setState({\n        showingInfoWindow: false,\n        activeMarker: null,\n      });\n    }\n  };\n  render() {\n    const google = window.google;\n    const mapStyle = {\n      position: \"relative\",\n      width: \"90%\",\n      height: \"90%\",\n    };\n    const quakeMarkers = this.props.data.map((quake) => {\n      let markerSize;\n      if (quake.properties.mag < 4) {\n        markerSize = new google.maps.Size(15, 15);\n      } else if (quake.properties.mag < 6) {\n        markerSize = new google.maps.Size(25, 25);\n      } else if (quake.properties.mag < 8) {\n        markerSize = new google.maps.Size(35, 35);\n      } else {\n        markerSize = new google.maps.Size(50, 50);\n      }\n      return (\n        <Marker\n          onClick={this.markerClickHandler}\n          title={quake.properties.title}\n          name={quake.properties.title}\n          position={{\n            lat: quake.geometry.coordinates[1],\n            lng: quake.geometry.coordinates[0],\n          }}\n          icon={{\n            url: icon,\n            scaledSize: markerSize,\n            origin: new google.maps.Point(0, 0),\n            anchor: new google.maps.Point(0, 0),\n          }}\n          key={uuidv4()}\n        />\n      );\n    });\n    return (\n      <Map\n        style={mapStyle}\n        google={this.props.google}\n        zoom={2}\n        initialCenter={{ lat: 47.6, lng: -122.3 }}\n      >\n        {quakeMarkers}\n        <InfoWindow\n          marker={this.state.activeMarker}\n          visible={this.state.showingInfoWindow}\n        >\n          <div className=\"info\">\n            <p>{this.state.selectedPlace.name}</p>\n          </div>\n        </InfoWindow>\n      </Map>\n    );\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: API_KEY,\n})(MapContainer);\n","import React from \"react\";\nimport icon from \"../images/earthquake.png\";\n\nfunction Navbar(props) {\n  return (\n    <div className=\"navbar\">\n      <div className=\"logo-title\">\n        <img className=\"quake-icon\" src={icon} alt=\"quake icon\" />\n        <h1>Geoquakes</h1>\n      </div>\n      <form action=\"/\" method=\"get\">\n        <div className=\"form-input\">\n          <label htmlFor=\"magnitude\">Magnitude</label>\n          <select\n            name=\"magnitude\"\n            id=\"magnitude\"\n            onChange={props.magnitudeHandler}\n          >\n            <option value=\"1\">1+</option>\n            <option value=\"2.5\">2.5+</option>\n            <option value=\"4.5\">4.5+</option>\n            <option value=\"significant\">significant</option>\n          </select>\n        </div>\n        <div className=\"form-input\">\n          <label htmlFor=\"timeframe\">Timeframe</label>\n          <select\n            name=\"timeframe\"\n            id=\"timeframe\"\n            onChange={props.timeframeHandler}\n          >\n            <option value=\"hour\">the past hour</option>\n            <option value=\"day\">the past day</option>\n            <option value=\"week\">the past week</option>\n            <option value=\"month\">the past month</option>\n            <option value=\"all-time\">all time</option>\n          </select>\n        </div>\n        <input type=\"submit\" value=\"search\" onClick={props.submitHandler} />\n      </form>\n    </div>\n  );\n}\n\nexport default Navbar;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport Quakes from \"./components/Quakes\";\nimport MapContainer from \"./components/Map\";\nimport Navbar from \"./components/Navbar\";\nimport { getQueryString } from \"./utils\";\nimport \"./App.css\";\n\n\nconst URL = `https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/`;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      quakesData: [],\n      timeframe: \"\",\n      magnitude: \"\",\n      error: null,\n      isLoaded: false,\n    };\n  }\n  componentDidMount() {\n    axios\n      .get(URL)\n      .then((response) => {\n        this.setState({ quakesData: response.data.features });\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }\n\n  // setState for magnitutde/timeframe on option/select input chnage\n  magnitudeHandler = (e) => {\n    this.setState({ magnitude: e.target.value });\n  };\n  timeframeHandler = (e) => {\n    this.setState({ timeframe: e.target.value });\n  };\n  // Make API call\n  submitHandler = (e) => {\n    e.preventDefault();\n\n    let [startTime, endTime, minmag] = getQueryString(\n      this.state.magnitude,\n      this.state.timeframe\n    );\n\n    const api_url = `https://earthquake.usgs.gov/fdsnws/event/1/query.geojson?starttime=${startTime}&endtime=${endTime}&minmagnitude=${minmag}&orderby=magnitude&limit=100`;\n    axios\n      .get(api_url)\n      .then((response) => {\n        this.setState({ quakesData: response.data.features });\n      })\n      .catch((error) => {\n        this.setState({ error });\n        // console.log(error);\n      });\n  };\n\n  render() {\n    const quakes = this.state.quakesData.map((data) => {\n      return <Quakes key={uuidv4()} data={data} />;\n    });\n    // Check state to determine time frame and use below to return values for start and end date\n    const startDate = new Date(\n      Date.now() - 1000 * 60 * 60 * 24 * 7\n    ).toLocaleDateString();\n    const endDate = new Date(Date.now()).toLocaleDateString();\n    if (this.state.error) {\n      return <div>Error: {this.state.error.message}</div>;\n    } else {\n      return (\n        <div className=\"app\">\n          <Navbar\n            magnitudeHandler={this.magnitudeHandler}\n            timeframeHandler={this.timeframeHandler}\n            submitHandler={this.submitHandler}\n            data={this.state.quakesData}\n          />\n          <div className=\"main-content-div\">\n            <div className=\"mapContainer\">\n              <MapContainer data={this.state.quakesData} />\n            </div>\n            <div className=\"quakeContainer\">\n              <div>\n                <h2>\n                  {this.state.quakesData.length > 0\n                    ? `${startDate} - ${endDate}`\n                    : \"Select a Timeframe and Magnitude\"}\n                </h2>\n                <div>\n                  <h2 className=\"quake-count\">\n                    {this.state.quakesData.length}\n                  </h2>\n                  <p>earthquakes</p>\n                </div>\n              </div>\n              <div id=\"info\">{quakes}</div>\n            </div>\n          </div>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","export function getQueryString(magnitude, timeframe) {\n  let startTime;\n  let currentTime = new Date(Date.now());\n\n  // Convert time to query string for API call\n  const getTimeString = (time) => {\n    return time.toISOString().split(\".\")[0].split(\"T\").join(\"%20\");\n  };\n  let endTime = getTimeString(currentTime);\n\n  // Set magnitude to float or 8 if significant\n  let minmag = parseFloat(magnitude) || 8;\n  \n  // Build star time query param\n  switch (timeframe) {\n    case \"hour\":\n      const hour = new Date(currentTime.getTime() - 1000 * 60 * 60);\n      startTime = getTimeString(hour);\n      break;\n    case \"day\":\n      const day = new Date(currentTime.getTime() - 1000 * 60 * 60 * 24);\n      startTime = getTimeString(day);\n      break;\n    case \"week\":\n      const week = new Date(currentTime.getTime() - 1000 * 60 * 60 * 24 * 7);\n      startTime = getTimeString(week);\n      break;\n    case \"month\":\n      const month = new Date(\n        currentTime.getTime() - 1000 * 60 * 60 * 24 * 7 * 4\n      );\n      startTime = getTimeString(month);\n      break;\n    case \"all-time\":\n      startTime = \"1900-01-01%2000:00:00\";\n      break;\n  }\n  return [startTime, endTime, minmag];\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}